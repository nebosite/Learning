{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","myState","location","capacity","cash","react_default","a","createElement","className","style","width","getStatus","border","onChange","handleInputChanged","bind","onKeyUp","handleKeyUp","getCargoWeight","margin","borderColor","args","setState","target","value","React","Component","Boolean","window","hostname","match","ReactDOM","render","App_AppComponent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGqBA,qBAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CACTC,QAAS,QACTC,SAAU,YACVC,SAAU,GACVC,KAAM,KAROX,wEAcf,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,MAAO,MAApC,WAGGd,KAAKe,YACNN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,oCAEEH,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CAACC,MAAM,EAAGE,OAAQ,GAAIC,SAAUjB,KAAKkB,mBAAmBC,KAAKnB,MAAOoB,QAASpB,KAAKqB,cAChGZ,EAAAC,EAAAC,cAAA,iDAQR,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,qBACmBZ,KAAKI,MAAME,SAC5BG,EAAAC,EAAAC,cAAA,WAFF,qBAIEF,EAAAC,EAAAC,cAAA,WAJF,kBAKkBX,KAAKsB,iBALvB,IAK0CtB,KAAKI,MAAMG,SACnDE,EAAAC,EAAAC,cAAA,WANF,UAOUX,KAAKI,MAAMI,KACnBC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CAACU,OAAQ,GAAIP,OAAQ,EAAGQ,YAAa,UACnDf,EAAAC,EAAAC,cAAA,UACMF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,iEASZ,OAAO,8CAGUc,GAEjBzB,KAAK0B,SAAS,CAACrB,QAASoB,EAAKE,OAAOC,4CAG1BH,WAnF4BI,IAAMC,YCS5BC,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1deb3e49.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nexport default class AppComponent extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n        myState: 'Fresh',\r\n        location: 'Hong Kong',\r\n        capacity: 50,\r\n        cash: 5000\r\n     };\r\n\r\n  }\r\n\r\n  render()  {\r\n      return (\r\n        <div className=\"App\" style={{width: 400}}>\r\n                Taipan++\r\n\r\n          {this.getStatus()}\r\n          <div className=\"regularText\">\r\n            Please choose: B)uy S)ell T)ravel\r\n            <input style={{width:1, border: 0}} onChange={this.handleInputChanged.bind(this)} onKeyUp={this.handleKeyUp} />\r\n            <br/>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  getStatus()\r\n  {\r\n    return (\r\n      <div className=\"statusBox\">\r\n        <div className=\"regularText\">\r\n        Current Location: {this.state.location}\r\n          <br/>\r\n          Date: May 22, 1598\r\n          <br/>\r\n          Ship Capacity: {this.getCargoWeight()}/{this.state.capacity}\r\n          <br/>\r\n          Cash: ${this.state.cash}\r\n          <br/>\r\n          <table style={{margin: 20, border: 1, borderColor: \"black\"}}>\r\n          <tr>\r\n                <td>Commodity</td>\r\n                <td>In Ship</td>\r\n                <td>In Port</td>\r\n                <td>Price</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Silk</td>\r\n                <td>20</td>\r\n                <td>12</td>\r\n                <td>$2500</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Arms</td>\r\n                <td>0</td>\r\n                <td>100</td>\r\n                <td>$300</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Gold</td>\r\n                <td>0</td>\r\n                <td>2</td>\r\n                <td>$18000</td>\r\n              </tr>\r\n          </table>\r\n        </div>\r\n      </div>);\r\n  }\r\n\r\n  getCargoWeight()\r\n  {\r\n    return 22;\r\n  }\r\n\r\n  handleInputChanged(args)\r\n  {\r\n    this.setState({myState: args.target.value});\r\n  }\r\n\r\n  handleKeyUp(args)\r\n  {\r\n      \r\n  }\r\n}\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}